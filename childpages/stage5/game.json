[{
    "JAVASCRIPT": "It is a programming language used to program the behavior of web pages and to make them interactive. The fact that it is supported on all major browsers, makes it a handy tool. It can be used on the server side with Node.js.",
    "WHERE DOES JAVASCRIPT RUN AND WHY IS THIS GOOD": "On the computer of the webpage visitor, because it doesn't require constant downloads from the website. It can put code into HTML depending what the user did, it can print messages and validate data before it being sent to the sever. Making a lot of interactivity easily possible as well as not very webxpensive, given that one is not making a page reload for every action.",
    "JAVASCRIPT EVENTS": "The page can immediately react to actions the user is making. A lot of them are predefined already, for ex. onclick(), onmouseover(), onpaste()...",
    "COOKIES": "Javascript can create them to offer the user a personalized experience, next time he comes around",
    "JAVASCRIPT SYNTAX": "There are a lot of curly braces and semicolons, there is else if, and  also an exciting way to initialize variiables, there is no need to assign it anything, but must when defining them put a var in front. They can store multiple types of data: numbers, booleans, arrays and objects. True and False come in many shapes",
    "JAVASCRIPT AFTER PYTHON": "It was interesting to program in JS, I noticed that for my task, I could use quite a lot of my python mentality, I just had to revisit the syntax. I am still a bit unpracticed at task of fishing data in both languages (posts, and gets, and database searches, and in this case looking through the html document from my js."
  },{
    "NETWORK": "Nodes and their connecting links, enabling communication between the nodes. Among computers they allow data exchange. Data is transferred in the form of packets sent and delivered to a specific node address.",
    "IMPORTANCE OF VALIDATING INPUT - Programmers side": "When a programmer allows (outdside) input to a program (or website), he must make sure that the input is of the wished for type, but especially that it is not going to mess up with the original code. Thus inputs have to either be made safe by escaping, or by checking if the input is what it supposed to be. An interesting case of this is maybe signing in, where the input is compared to couples of values ont the server, if they match, you are in.",
    "IMPORTANCE OF VALIDATING INPUT - Users side": "It can help the user to have a smoother experience, by checking and responding whether the input is what it was meant to be (a number, a month...). It can also give feedback as to which element they need to revisit by returning the page with info on the reason for the invalid input. Another reason is if the input contains code characters it could mess up with the program, and it is possible that it is not what the user wanted.",
    "HTML TEMPLATES": "They are awesome, copies of pages can be made in thousands, by collaging the pre-defined parts together and reusing them over and over agai, whitout the need to rewrite code each time. They allow adding and styling of content, that we do not know yet at the time of page making (for ex. user inputed content), by just predefining space for it. It one of the difference between web apps, and static web pages.",
    "TEMPLATES AND ABSTRACTION": "We go one more step further away from constructing the pages step by step, but we create concepts, or page sections, or things based on how they function. We define each section once, and then we can use it as much and whenever we want it through a simple call. Awesome because it makes thinking about pages more functional.",
    "KITTY": "miao"
  },{
    "BIT": "basic unit of information, can have only one of two values: 0/1, yes/no, True/False, +/-, on/off ...",
    "URL": "Human readable address of a webage that translates to a numerical IP Address Steve Huffman said: 'the location of the physical machine which has the document we want to fetch.'",
    "SERVER": "It is the software that accepts and responds to requests about the data that is stored on it. It is also the machine running the software responsibile for storing and communicating. They wait to get instructions on what to do. The http instructions that I learned a bit about are POST and GET. When it gets a POST request it updates the information on itself, whereas when it gets a GET request, it goes to fish out the info and delivers it to the asker.",
    "BANDWITH": "Bits per second.",
    "GET": "parameters put in url - used for fetching data - maximum url lenght - ok to cache - no change server",
    "POST": "parameters put in body -used for updating data on servers - no max len - not ok to $ - can change server"
  }
]